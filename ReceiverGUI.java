import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.text.DefaultCaret;

public class ReceiverGUI extends javax.swing.JFrame {

    private String destination = "";
    private Boolean TCP = true;

    private String sourceIP;
    private int sourcePort = 0;
    private long current;

    class receiveFile extends Thread {

        @Override
        public void run() {
            if (TCP) {

                //Initialize socket
                Socket socket;
                try {
                    socket = new Socket(InetAddress.getByName(sourceIP), sourcePort);
                    Tester test1 = new Tester();
                    test1.StartTimer();
                    InputStream is = socket.getInputStream();

                    byte[] length = new byte[10000];
                    is.read(length);
                    String lengthS = new String(length, "UTF-8");
                    int fileSize = Integer.parseInt(lengthS.trim());
                    System.out.println("File size: " + fileSize);

                    progressBar.setMaximum(fileSize);

                    byte[] contents = new byte[10000];

                    FileOutputStream fos = new FileOutputStream(destination);
                    BufferedOutputStream bos = new BufferedOutputStream(fos);

                    //No of bytes read in one read() call
                    int bytesRead = 0;
                    current = 0;

                    current = 0;
                    while ((bytesRead = is.read(contents)) != -1) {
                        bos.write(contents, 0, bytesRead);
                        current += bytesRead;
                        progressBar.setValue((int) current);
                    }

                    bos.flush();
                    socket.close();
                    System.out.println(test1.StopTimer(Tester.MILLI));
                    System.out.println("File saved successfully!");
                    displayTxta.append("File has been received successfully.\n\n");
                } catch (Exception e) {
                    displayTxta.append("***There are no incoming files on this IP and Port combination!***\n\n");
                }
                this.interrupt();
            } else {
                ReceiverRBUDP receiver = new ReceiverRBUDP(sourcePort, destination, sourceIP);

                int response = receiver.createAndListen();
                System.out.println("Response " + response);
                switch (response) {
                    case ReceiverRBUDP.COULD_NOT_CONNECT:
                        displayTxta.append("Cannot connect to socket.\n\n");
                        break;
                    case ReceiverRBUDP.CLASS_NOT_FOUND:
                    case ReceiverRBUDP.ERROR_RECV_PACKET:
                        displayTxta.append("Error occured during sending of packets. \n\n");
                        break;
                    case ReceiverRBUDP.SUCCESS:
                        displayTxta.append("File has been saved successfully.\n\n");
                        break;
                }

                this.interrupt();
            }
        }
    }

    /**
     * Creates new form ReceiverGUI
     */
    public ReceiverGUI() {
        initComponents();
        DefaultCaret caret = (DefaultCaret) displayTxta.getCaret();
        caret.setUpdatePolicy(DefaultCaret.OUT_BOTTOM);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileMethodBtnGrp = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        chooseFileBtn = new javax.swing.JButton();
        fileTxtf = new javax.swing.JTextField();
        udpRdio = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        tcpRdio = new javax.swing.JRadioButton();
        sendBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayTxta = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        portTxtf = new javax.swing.JTextField();
        ipTxtf = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("EZ FILE TRANSFER - RECEIVER");

        chooseFileBtn.setText("Choose Destination");
        chooseFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileBtnActionPerformed(evt);
            }
        });

        fileTxtf.setText("");

        fileMethodBtnGrp.add(udpRdio);
        udpRdio.setText("UDP");
        udpRdio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                udpRdioActionPerformed(evt);
            }
        });

        jLabel2.setText("File Transfer Method:");

        fileMethodBtnGrp.add(tcpRdio);
        tcpRdio.setSelected(true);
        tcpRdio.setText("TCP");
        tcpRdio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tcpRdioActionPerformed(evt);
            }
        });

        sendBtn.setText("Receive File");
        sendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendBtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Progress:");

        displayTxta.setColumns(20);
        displayTxta.setRows(5);
        jScrollPane1.setViewportView(displayTxta);

        jLabel4.setText("Source IP:");

        jLabel5.setText("Source Port:");

        portTxtf.setText("5000");

        ipTxtf.setText("localhost");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chooseFileBtn)
                        .addGap(18, 18, 18)
                        .addComponent(fileTxtf, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(36, 36, 36)
                        .addComponent(ipTxtf, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(portTxtf, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tcpRdio)
                                .addGap(19, 19, 19)
                                .addComponent(udpRdio)))
                        .addGap(185, 185, 185)
                        .addComponent(sendBtn))
                    .addComponent(jLabel3)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chooseFileBtn)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(fileTxtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel4))
                    .addComponent(ipTxtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jLabel5))
                    .addComponent(portTxtf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(11, 11, 11)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tcpRdio)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(udpRdio))))
                    .addComponent(sendBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jLabel3)
                .addGap(12, 12, 12)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void chooseFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.showOpenDialog(null);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        File f = fileChooser.getSelectedFile();
        try {
            destination = f.getAbsolutePath();
            fileTxtf.setText(destination);
        } catch (Exception e) {

        }
    }//GEN-LAST:event_chooseFileBtnActionPerformed

    private void udpRdioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_udpRdioActionPerformed
        TCP = tcpRdio.isSelected();
    }//GEN-LAST:event_udpRdioActionPerformed

    private void tcpRdioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tcpRdioActionPerformed
        TCP = tcpRdio.isSelected();
    }//GEN-LAST:event_tcpRdioActionPerformed

    private void sendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendBtnActionPerformed
        destination = fileTxtf.getText();
        if (!destination.equalsIgnoreCase("")) {
            sourceIP = ipTxtf.getText();
            sourcePort = 0;
            if (sourceIP.equalsIgnoreCase("")) {
                System.out.println("Please enter a source IP.");
                return;
            }

            try {
                sourcePort = Integer.parseInt(portTxtf.getText());
            } catch (Exception e) {
                System.out.println("Please enter a valid source Port.");
                return;
            }

            new receiveFile().start();            
        }        
    }//GEN-LAST:event_sendBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReceiverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReceiverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReceiverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReceiverGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReceiverGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseFileBtn;
    public static javax.swing.JTextArea displayTxta;
    private javax.swing.ButtonGroup fileMethodBtnGrp;
    private javax.swing.JTextField fileTxtf;
    private javax.swing.JTextField ipTxtf;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField portTxtf;
    public static javax.swing.JProgressBar progressBar;
    private javax.swing.JButton sendBtn;
    private javax.swing.JRadioButton tcpRdio;
    private javax.swing.JRadioButton udpRdio;
    // End of variables declaration//GEN-END:variables
}
